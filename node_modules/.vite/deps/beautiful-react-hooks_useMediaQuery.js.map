{
  "version": 3,
  "sources": ["../../beautiful-react-hooks/esm/useMediaQuery.js", "../../beautiful-react-hooks/esm/shared/isClient.js", "../../beautiful-react-hooks/esm/shared/isAPISupported.js", "../../beautiful-react-hooks/esm/shared/warnOnce.js"],
  "sourcesContent": ["import { useEffect, useState } from 'react';\nimport isClient from './shared/isClient';\nimport isAPISupported from './shared/isAPISupported';\nimport warnOnce from './shared/warnOnce';\nconst errorMessage = 'matchMedia is not supported, this could happen both because window.matchMedia is not supported by' +\n    ' your current browser or you\\'re using the useMediaQuery hook whilst server side rendering.';\n/**\n * Accepts a media query string then uses the\n * [window.matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) API to determine if it\n * matches with the current document.<br />\n * It also monitor the document changes to detect when it matches or stops matching the media query.<br />\n * Returns the validity state of the given media query.\n *\n */\nconst useMediaQuery = (mediaQuery) => {\n    if (!isClient || !isAPISupported('matchMedia')) {\n        warnOnce(errorMessage);\n        return false;\n    }\n    const [isVerified, setIsVerified] = useState(!!window.matchMedia(mediaQuery).matches);\n    useEffect(() => {\n        const mediaQueryList = window.matchMedia(mediaQuery);\n        const documentChangeHandler = () => { setIsVerified(!!mediaQueryList.matches); };\n        try {\n            mediaQueryList.addEventListener('change', documentChangeHandler);\n        }\n        catch (e) {\n            // Safari isn't supporting mediaQueryList.addEventListener\n            mediaQueryList.addListener(documentChangeHandler);\n        }\n        documentChangeHandler();\n        return () => {\n            try {\n                mediaQueryList.removeEventListener('change', documentChangeHandler);\n            }\n            catch (e) {\n                // Safari isn't supporting mediaQueryList.removeEventListener\n                mediaQueryList.removeListener(documentChangeHandler);\n            }\n        };\n    }, [mediaQuery]);\n    return isVerified;\n};\nexport default useMediaQuery;\n", "/**\n * Exports a boolean value reporting whether is client side or server side by checking on the window object\n */\nconst isClient = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexport default isClient;\n", "/**\n * Exports a boolean value reporting whether the given API is supported or not\n */\nconst isApiSupported = (api) => (typeof window !== 'undefined' ? api in window : false);\nexport default isApiSupported;\n", "const cache = new Map();\n/**\n * A tiny wrapper around console.warn that makes sure the message is only displayed once.\n * Used mainly to avoid polluting server side logs\n * @param message\n */\nconst warnOnce = (message) => {\n    if (cache.has(message))\n        return;\n    cache.set(message, true);\n    // eslint-disable-next-line no-console\n    console.warn(message);\n};\nexport default warnOnce;\n"],
  "mappings": ";;;;;;;;AAAA,mBAAoC;;;ACGpC,IAAM,WAAW,CAAC,EAAE,OAAO,WAAW,eAAe,OAAO,YAAY,OAAO,SAAS;AACxF,IAAO,mBAAQ;;;ACDf,IAAM,iBAAiB,CAAC,QAAS,OAAO,WAAW,cAAc,OAAO,SAAS;AACjF,IAAO,yBAAQ;;;ACJf,IAAM,QAAQ,oBAAI,IAAI;AAMtB,IAAM,WAAW,CAAC,YAAY;AAC1B,MAAI,MAAM,IAAI,OAAO;AACjB;AACJ,QAAM,IAAI,SAAS,IAAI;AAEvB,UAAQ,KAAK,OAAO;AACxB;AACA,IAAO,mBAAQ;;;AHTf,IAAM,eAAe;AAUrB,IAAM,gBAAgB,CAAC,eAAe;AAClC,MAAI,CAAC,oBAAY,CAAC,uBAAe,YAAY,GAAG;AAC5C,qBAAS,YAAY;AACrB,WAAO;AAAA,EACX;AACA,QAAM,CAAC,YAAY,aAAa,QAAI,uBAAS,CAAC,CAAC,OAAO,WAAW,UAAU,EAAE,OAAO;AACpF,8BAAU,MAAM;AACZ,UAAM,iBAAiB,OAAO,WAAW,UAAU;AACnD,UAAM,wBAAwB,MAAM;AAAE,oBAAc,CAAC,CAAC,eAAe,OAAO;AAAA,IAAG;AAC/E,QAAI;AACA,qBAAe,iBAAiB,UAAU,qBAAqB;AAAA,IACnE,SACO,GAAP;AAEI,qBAAe,YAAY,qBAAqB;AAAA,IACpD;AACA,0BAAsB;AACtB,WAAO,MAAM;AACT,UAAI;AACA,uBAAe,oBAAoB,UAAU,qBAAqB;AAAA,MACtE,SACO,GAAP;AAEI,uBAAe,eAAe,qBAAqB;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ,GAAG,CAAC,UAAU,CAAC;AACf,SAAO;AACX;AACA,IAAO,wBAAQ;",
  "names": []
}
